// Значения характеристик по высотам из ГОСТ.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//*************************************************************************************************************
namespace StandartHelperLibrary.MathHelper
{
    /// <summary>
    /// Значения различных характеристик атмосферы по высотам.
    /// </summary>
    public class TDatabaseAtmospheric
    {
        /// <summary>
        /// Значение выосты
        /// </summary>
        public static double[] Attitude = AttitudeData();
        /// <summary>
        /// Давление на высоте Attitude
        /// </summary>
        public static double[] Pressure = PressureData();
        /// <summary>
        /// Плотность на высоте Attitude
        /// </summary>
        public static double[] Density = DensityData();
        /// <summary>
        /// Ускорение свободного падения на высоте Attitude
        /// </summary>
        public static double[] AccelerationOfGravity = AccelerationOfGravityData();
        /// <summary>
        /// Скорость звука на высоте Attitude
        /// </summary>
        public static double[] SpeedOfSound = SpeedOfSoundData();
        /// <summary>
        /// Температура в Кельвинах на высоте Attitude
        /// </summary>
        public static double[] TemperatureOfKelvin = TemperatureOfKelvinData();
        /// <summary>
        /// Температура в Кельвинах на высоте Attitude
        /// </summary>
        public static double[] TemperatureOfCelsius = TemperatureOfCelsiusData();
        /// <summary>
        /// Кинематическая вязкость на высоте Attitude
        /// </summary>
        public static double[] AirKinematicalViscosity = AirKinematicalViscosityData();
        /// <summary>
        /// Динамическая вязкость на высоте Attitude
        /// </summary>
        public static double[] AirDynamicalViscosity = AirDynamicalViscosityData();

//---------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Массив значений высот.
        /// </summary>
        /// <returns>Массив значений высот.</returns>
        private static double[] AttitudeData()
        {
            double[] Attitude = new double[143]{
            0f, 300f, 450f, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
            8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000, 14500, 15000, 15500,
            16000, 16500, 17000, 17500, 18000, 18500, 19000, 19500, 20000, 20500, 21000, 21500, 22000, 22500, 23000,
            23500, 24000, 24500, 25000, 25500, 26000, 26500, 27000, 27500, 28000, 28500, 29000, 29500, 30000, 30500,
            31000, 31500, 32000, 32500, 33000, 33500, 34000, 34500, 35000, 35500, 36000, 36500, 37000, 37500, 38000,
            38500, 39000, 39500, 40000, 40500, 41000, 41500, 42000, 42500, 43000, 43500, 44000, 44500, 45000, 45500,
            46000, 46500, 47000, 47500, 48000, 48500, 49000, 49500, 50000, 50500, 51000, 51400, 52000, 52400, 53000,
            53400, 54000, 54400, 55000, 55400, 56000, 56400, 57000, 57400, 58000, 58400, 59000, 59400, 60000, 60400,
            61000, 61400, 62000, 62400, 63000, 63400, 64000, 64400, 65000, 65400, 66000, 66400, 67000, 67400, 68000,
            68400, 69000, 69400, 70000
            };
            return Attitude;
        }
//--------------------------------------------------------------------------------------------------------------------------------
        private static float[] AttitudeDataF()
        {
            float[] Attitude = new float[143]{
            0f, 300f, 450f, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500,
            8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000, 13500, 14000, 14500, 15000, 15500,
            16000, 16500, 17000, 17500, 18000, 18500, 19000, 19500, 20000, 20500, 21000, 21500, 22000, 22500, 23000,
            23500, 24000, 24500, 25000, 25500, 26000, 26500, 27000, 27500, 28000, 28500, 29000, 29500, 30000, 30500,
            31000, 31500, 32000, 32500, 33000, 33500, 34000, 34500, 35000, 35500, 36000, 36500, 37000, 37500, 38000,
            38500, 39000, 39500, 40000, 40500, 41000, 41500, 42000, 42500, 43000, 43500, 44000, 44500, 45000, 45500,
            46000, 46500, 47000, 47500, 48000, 48500, 49000, 49500, 50000, 50500, 51000, 51400, 52000, 52400, 53000,
            53400, 54000, 54400, 55000, 55400, 56000, 56400, 57000, 57400, 58000, 58400, 59000, 59400, 60000, 60400,
            61000, 61400, 62000, 62400, 63000, 63400, 64000, 64400, 65000, 65400, 66000, 66400, 67000, 67400, 68000,
            68400, 69000, 69400, 70000
            };
            return Attitude;
        }
//------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Массив значений давлений по высотам массива TDatabaseAtmospheric.Attitude.
        /// </summary>
        /// <returns>Массив значений давлений по высотам массива TDatabaseAtmospheric.Attitude.</returns>
        private static double[] PressureData()
        {
            double[] Pressure = new double[143]
            {
                101325f, 97772.7f, 96035f, 95461.3f, 89876.3f, 84559.7f, 79501.4f, 74691.7f, 70121.2f, 65780.4f, 61660.4f,
                57752.6f, 54048.3f, 50539.3f, 47217.6f, 44075.5f, 41105.3f, 38299.7f, 35651.6f, 33154.2f, 30800.7f, 
                8584.7f, 26499.9f, 24540.2f, 22699.9f, 20984.7f, 19399.4f, 17934f, 16579.6f, 15327.6f, 14170.3f, 13100.6f,
                12111.8f, 11197.7f, 10352.8f, 9571.73f, 8849.7f, 8182.24f, 7565.21f, 6994.8f, 6467.7f, 5979.97f, 5529.29f,
                5112.98f, 4728.92f, 4374.54f, 4047.48f, 3745.58f, 3466.85f, 3209.46f, 2971.74f, 2752.12f, 2549.21f, 2361.69f,
                2188.37f, 2028.13f, 1879.97f, 1742.94f, 1616.19f, 1498.93f, 1390.42f, 1289.99f, 1197.03f, 1110.96f, 1031.26f,
                957.44f, 889.06f, 825.76f, 767.306f, 713.31f, 663.41f, 617.272f, 574.592f, 535.093f, 498.52f, 464.642f, 433.246f,
                404.137f, 377.137f, 352.081f, 328.82f, 307.216f, 287.143f, 268.483f, 251.132f, 234.989f, 219.966f, 205.979f, 192.95f,
                180.811f, 169.496f, 158.944f, 149.101f, 139.915f, 131.34f, 123.332f, 115.851f, 108.857f, 102.295f, 96.1295f, 90.3363f,
                84.8931f, 79.7787f, 74.9731f, 70.4576f, 67.0424f, 62.2144f, 59.1759f, 54.8734f, 52.1671f, 48.3374f, 45.9299f, 42.5249f,
                40.3857f, 37.3621f, 35.4636f, 32.7818f, 31.0991f, 28.7236f, 27.2339f, 25.1323f, 23.8153f, 21.9586f, 20.7958f, 19.1574f,
                18.1322f, 16.6886f, 15.7858f, 14.5156f, 13.7218f, 12.6058f, 11.9088f, 10.9297f, 10.3186f, 9.46086f, 8.92599f, 8.17568f,
                7.7082f, 7.05293f, 6.64499f, 6.07364f, 5.71824f, 5.22088f,
            };
            return Pressure;
        }
//---------------------------------------------------------------------------------------------------------------------------------------
        private static float[] PressureDataF()
        {
            float[] Pressure = new float[143]
            {
                101325f, 97772.7f, 96035f, 95461.3f, 89876.3f, 84559.7f, 79501.4f, 74691.7f, 70121.2f, 65780.4f, 61660.4f,
                57752.6f, 54048.3f, 50539.3f, 47217.6f, 44075.5f, 41105.3f, 38299.7f, 35651.6f, 33154.2f, 30800.7f,
                8584.7f, 26499.9f, 24540.2f, 22699.9f, 20984.7f, 19399.4f, 17934f, 16579.6f, 15327.6f, 14170.3f, 13100.6f,
                12111.8f, 11197.7f, 10352.8f, 9571.73f, 8849.7f, 8182.24f, 7565.21f, 6994.8f, 6467.7f, 5979.97f, 5529.29f,
                5112.98f, 4728.92f, 4374.54f, 4047.48f, 3745.58f, 3466.85f, 3209.46f, 2971.74f, 2752.12f, 2549.21f, 2361.69f,
                2188.37f, 2028.13f, 1879.97f, 1742.94f, 1616.19f, 1498.93f, 1390.42f, 1289.99f, 1197.03f, 1110.96f, 1031.26f,
                957.44f, 889.06f, 825.76f, 767.306f, 713.31f, 663.41f, 617.272f, 574.592f, 535.093f, 498.52f, 464.642f, 433.246f,
                404.137f, 377.137f, 352.081f, 328.82f, 307.216f, 287.143f, 268.483f, 251.132f, 234.989f, 219.966f, 205.979f, 192.95f,
                180.811f, 169.496f, 158.944f, 149.101f, 139.915f, 131.34f, 123.332f, 115.851f, 108.857f, 102.295f, 96.1295f, 90.3363f,
                84.8931f, 79.7787f, 74.9731f, 70.4576f, 67.0424f, 62.2144f, 59.1759f, 54.8734f, 52.1671f, 48.3374f, 45.9299f, 42.5249f,
                40.3857f, 37.3621f, 35.4636f, 32.7818f, 31.0991f, 28.7236f, 27.2339f, 25.1323f, 23.8153f, 21.9586f, 20.7958f, 19.1574f,
                18.1322f, 16.6886f, 15.7858f, 14.5156f, 13.7218f, 12.6058f, 11.9088f, 10.9297f, 10.3186f, 9.46086f, 8.92599f, 8.17568f,
                7.7082f, 7.05293f, 6.64499f, 6.07364f, 5.71824f, 5.22088f,
            };
            return Pressure;
        }
//---------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Массив значений плотности воздуха по высотам массива TDatabaseAtmospheric.Attitude.
        /// </summary>
        /// <returns>Массив значений плотности воздуха по высотам массива TDatabaseAtmospheric.Attitude.</returns>
        private static double[] DensityData()
        {
            double[] Density = new double[143]
            {
                1.225f, 1.19011f, 1.17295f, 1.16727f, 1.11166f, 1.0581f, 1.00655f, 0.956954f, 0.909254f, 0.863402f, 0.819347f,
                0.777038f, 0.736429f, 0.697469f, 0.66011f, 0.62431f,  590018f, 0.557192f, 0.525786f, 0.495757f, 0.467063f,
                0.439661f, 0.41351f, 0.38857f, 0.364801f, 0.337429f, 0.311937f, 0.288375f, 0.266595f, 0.246464f, 0.227855f,
                0.210654f, 0.194755f, 0.180057f, 0.16647f, 0.153911f, 0.142301f, 0.131568f, 0.121647f, 0.112475f, 0.103995f,
                0.0961565f, 0.0889097f, 0.0820511f, 0.0757146f, 0.0698811f, 0.0645096f, 0.0595626f, 0.050055f, 0.0508069f,
                0.0469377f, 0.0433714f, 0.0400837f, 0.0370522f, 0.0342565f, 0.0316775f, 0.0292982f, 0.0271026f, 0.0250762f,
                0.0232055f, 0.0214783f, 0.0198833f, 0.0184101f, 0.0170491f, 0.0157915f, 0.014629f, 0.0135551f, 0.0125298f,
                0.011573f, 0.0106945f, 0.00988736f, 0.00914553f, 0.00846334f, 0.00783567f, 0.00725789f, 0.00672576f, 0.00623544f,
                0.00578343f, 0.00536653f, .00498185f, 0.00462672f, 0.00429873f, 0.00399566f, 0.0037155f, 0.00345639f, 0.00321666f,
                0.00299475f, 0.00278926f, 0.00259888f, 0.00242244f, 0.00225884f, 0.00210709f, 0.00196627f, 0.00183555f, 0.00171414f,
                0.00160135f, 0.00149651f, 0.00140116f, 0.00131669f, 0.00123733f, 0.00116277f, 0.0010927f, 0.00102687f, 0.000965018f,
                0.000906897f, 0.000862938f, 0.000805613f, 0.000769418f, 0.000717904f, 0.000685333f, 0.000639001f, 0.000609723f,
                0.000568096f, 0.000541806f, 0.000504448f, 0.000480867f, 0.000447377f, 0.00042625f, 0.000396263f, 0.000377355f,
                0.000350535f, 0.000333635f, 0.000309676f, 0.000294588f, 0.000273212f, 0.000259758f, 0.000240709f, 0.000228728f,
                0.000211774f, 0.000201118f, 0.00018605f, 0.000176585f, 0.000163209f, 0.000154813f, 0.000142957f, 0.00013552f,
                0.000125025f, 0.000118446f, 0.000109169f, 0.000103358f, 9.51698E-05f, 9.00448E-05f, 8.28284E-05f
            };
            return Density;
        }
//------------------------------------------------------------------------------------------------------------------------------------------
        private static float[] DensityDataF()
        {
            float[] Density = new float[143]
            {
                1.225f, 1.19011f, 1.17295f, 1.16727f, 1.11166f, 1.0581f, 1.00655f, 0.956954f, 0.909254f, 0.863402f, 0.819347f,
                0.777038f, 0.736429f, 0.697469f, 0.66011f, 0.62431f,  590018f, 0.557192f, 0.525786f, 0.495757f, 0.467063f,
                0.439661f, 0.41351f, 0.38857f, 0.364801f, 0.337429f, 0.311937f, 0.288375f, 0.266595f, 0.246464f, 0.227855f,
                0.210654f, 0.194755f, 0.180057f, 0.16647f, 0.153911f, 0.142301f, 0.131568f, 0.121647f, 0.112475f, 0.103995f,
                0.0961565f, 0.0889097f, 0.0820511f, 0.0757146f, 0.0698811f, 0.0645096f, 0.0595626f, 0.050055f, 0.0508069f,
                0.0469377f, 0.0433714f, 0.0400837f, 0.0370522f, 0.0342565f, 0.0316775f, 0.0292982f, 0.0271026f, 0.0250762f,
                0.0232055f, 0.0214783f, 0.0198833f, 0.0184101f, 0.0170491f, 0.0157915f, 0.014629f, 0.0135551f, 0.0125298f,
                0.011573f, 0.0106945f, 0.00988736f, 0.00914553f, 0.00846334f, 0.00783567f, 0.00725789f, 0.00672576f, 0.00623544f,
                0.00578343f, 0.00536653f, .00498185f, 0.00462672f, 0.00429873f, 0.00399566f, 0.0037155f, 0.00345639f, 0.00321666f,
                0.00299475f, 0.00278926f, 0.00259888f, 0.00242244f, 0.00225884f, 0.00210709f, 0.00196627f, 0.00183555f, 0.00171414f,
                0.00160135f, 0.00149651f, 0.00140116f, 0.00131669f, 0.00123733f, 0.00116277f, 0.0010927f, 0.00102687f, 0.000965018f,
                0.000906897f, 0.000862938f, 0.000805613f, 0.000769418f, 0.000717904f, 0.000685333f, 0.000639001f, 0.000609723f,
                0.000568096f, 0.000541806f, 0.000504448f, 0.000480867f, 0.000447377f, 0.00042625f, 0.000396263f, 0.000377355f,
                0.000350535f, 0.000333635f, 0.000309676f, 0.000294588f, 0.000273212f, 0.000259758f, 0.000240709f, 0.000228728f,
                0.000211774f, 0.000201118f, 0.00018605f, 0.000176585f, 0.000163209f, 0.000154813f, 0.000142957f, 0.00013552f,
                0.000125025f, 0.000118446f, 0.000109169f, 0.000103358f, 9.51698E-05f, 9.00448E-05f, 8.28284E-05f
            };
            return Density;
        }
//------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Массив значений скорости звука по высотам массива TDatabaseAtmospheric.Attitude.
        /// </summary>
        /// <returns>Массив значений скорости звука по высотам массива TDatabaseAtmospheric.Attitude.</returns>
        private static double[] SpeedOfSoundData()
        {
            double[] SpeedOfSound = new double[143]
            {
                340.294f, 339.141f, 338.563f, 338.37f, 336.435f, 334.489f, 332.532f, 330.563f, 328.584f, 326.592f, 324.589f, 322.573f,
                320.545f, 318.505f, 316.452f, 314.385f, 312.306f, 310.212f, 308.105f, 305.984f, 303.848f, 301.697f, 299.532f, 297.351f,
                295.154f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f,
                295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.365f, 295.703f, 296.04f, 296.377f, 296.713f,
                297.049f, 297.385f, 297.72f, 298.055f, 298.389f, 298.723f, 299.056f, 299.389f, 299.722f, 300.054f, 300.386f, 300.717f,
                301.048f, 301.379f, 301.709f, 302.038f, 302.368f, 302.696f, 303.025f, 303.752f, 304.667f, 305.579f, 306.489f, 307.396f,
                308.299f, 309.201f, 310.099f, 310.995f, 311.887f, 312.778f, 313.665f, 314.55f, 315.432f, 316.312f, 317.189f, 318.064f,
                318.936f, 319.805f, 320.672f, 321.537f, 322.399f, 323.259f, 324.116f, 324.971f, 325.823f, 326.673f, 327.521f, 328.367f,
                329.21f, 329.799f, 329.799f, 329.799f, 329.799f, 329.799f, 329.799f, 329.799f, 329.799f, 329.799f, 328.811f, 328.137f,
                327.124f, 326.446f, 325.428f, 324.747f, 323.724f, 323.04f, 322.011f, 321.324f, 320.29f, 319.599f, 318.56f, 317.866f,
                316.821f, 316.123f, 315.073f, 314.372f, 313.316f, 312.611f, 311.55f, 310.841f, 309.774f, 309.061f, 307.988f, 307.271f,
                306.193f, 305.472f, 304.387f, 303.662f, 303.572f, 301.842f, 300.746f, 300.012f, 298.909f, 298.171f, 297.061f 
            };
            return SpeedOfSound;
        }
//-------------------------------------------------------------------------------------------------------------------------------------------------
        private static float[] SpeedOfSoundDataF()
        {
            float[] SpeedOfSound = new float[143]
            {
                340.294f, 339.141f, 338.563f, 338.37f, 336.435f, 334.489f, 332.532f, 330.563f, 328.584f, 326.592f, 324.589f, 322.573f,
                320.545f, 318.505f, 316.452f, 314.385f, 312.306f, 310.212f, 308.105f, 305.984f, 303.848f, 301.697f, 299.532f, 297.351f,
                295.154f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f,
                295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.069f, 295.365f, 295.703f, 296.04f, 296.377f, 296.713f,
                297.049f, 297.385f, 297.72f, 298.055f, 298.389f, 298.723f, 299.056f, 299.389f, 299.722f, 300.054f, 300.386f, 300.717f,
                301.048f, 301.379f, 301.709f, 302.038f, 302.368f, 302.696f, 303.025f, 303.752f, 304.667f, 305.579f, 306.489f, 307.396f,
                308.299f, 309.201f, 310.099f, 310.995f, 311.887f, 312.778f, 313.665f, 314.55f, 315.432f, 316.312f, 317.189f, 318.064f,
                318.936f, 319.805f, 320.672f, 321.537f, 322.399f, 323.259f, 324.116f, 324.971f, 325.823f, 326.673f, 327.521f, 328.367f,
                329.21f, 329.799f, 329.799f, 329.799f, 329.799f, 329.799f, 329.799f, 329.799f, 329.799f, 329.799f, 328.811f, 328.137f,
                327.124f, 326.446f, 325.428f, 324.747f, 323.724f, 323.04f, 322.011f, 321.324f, 320.29f, 319.599f, 318.56f, 317.866f,
                316.821f, 316.123f, 315.073f, 314.372f, 313.316f, 312.611f, 311.55f, 310.841f, 309.774f, 309.061f, 307.988f, 307.271f,
                306.193f, 305.472f, 304.387f, 303.662f, 303.572f, 301.842f, 300.746f, 300.012f, 298.909f, 298.171f, 297.061f
            };
            return SpeedOfSound;
        }
//--------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Массив значений ускорения свободдного падения по высотам массива TDatabaseAtmospheric.Attitude.
        /// </summary>
        /// <returns>Массив значений ускорения свободдного падения по высотам массива TDatabaseAtmospheric.Attitude.</returns>
        private static double[] AccelerationOfGravityData()
        {
            double[] AccelerationOfGravity = new double[143]
            {
                9.8066f, 9.8057f, 9.8053f, 9.8051f, 9.8036f, 9.802f, 9.8005f, 9.7989f, 9.7974f, 9.7959f, 9.7943f, 9.7928f, 9.7912f, 
                9.7897f, 9.7882f, 9.7866f, 9.7851f, 9.7836f, 9.782f, 9.7805f, 9.7789f, 9.7774f, 9.7759f, 9.7743f, 9.7728f, 9.7713f,
                9.7697f, 9.7682f, 9.7667f, 9.7651f, 9.7636f, 9.7621f, 9.7605f, 9.759f, 9.7575f, 9.7559f, 9.7544f, 9.7529f, 9.7513f,
                9.7498f, 9.7483f, 9.7468f, 9.7452f, 9.7437f, 9.7422f, 9.7406f, 9.7391f, 9.7376f, 9.7361f, 9.7345f, 9.733f, 9.7315f,
                9.73f, 9.7284f, 9.7269f, 9.7254f, 9.7239f, 9.7223f, 9.7208f, 9.7193f, 9.7178f, 9.7163f, 9.7147f, 9.7132f, 9.7117f,
                9.7102f, 9.7087f, 9.7071f, 9.7056f, 9.7041f, 9.7026f, 9.7011f, 9.6995f, 9.698f, 9.6965f, 9.695f, 9.6935f, 9.692f,
                9.6904f, 9.6889f, 9.6874f, 9.6859f, 9.6844f, 9.6829f, 9.6814f, 9.6798f, 9.6783f, 9.6768f, 9.6753f, 9.6738f, 9.6723f,
                9.6708f, 9.6693f, 9.6678f, 9.6662f, 9.6647f, 9.6632f, 9.6617f, 9.6602f, 9.6587f, 9.6572f, 9.6557f, 9.6542f, 9.6527f,
                9.6512f, 9.65f, 9.6482f, 9.647f, 9.6451f, 9.6439f, 9.6421f, 9.6409f, 9.6391f, 9.6379f, 9.6361f, 9.6349f, 9.6331f, 9.6319f,
                 9.6301f, 9.6289f, 9.6271f, 9.6259f, 9.6241f, 9.6229f, 9.6211f, 9.6199f, 9.6181f, 9.6169f, 9.6151f, 9.6139f, 9.6121f,
                9.6109f, 9.6091f, 9.6079f, 9.6061f, 9.6049f, 9.6031f, 9.602f, 9.6002f, 9.599f, 9.5972f, 9.596f, 9.5942f
            };
            return AccelerationOfGravity;
        }
//-------------------------------------------------------------------------------------------------------------------------------------------
        private static float[] AccelerationOfGravityDataF()
        {
            float[] AccelerationOfGravity = new float[143]
            {
                9.8066f, 9.8057f, 9.8053f, 9.8051f, 9.8036f, 9.802f, 9.8005f, 9.7989f, 9.7974f, 9.7959f, 9.7943f, 9.7928f, 9.7912f,
                9.7897f, 9.7882f, 9.7866f, 9.7851f, 9.7836f, 9.782f, 9.7805f, 9.7789f, 9.7774f, 9.7759f, 9.7743f, 9.7728f, 9.7713f,
                9.7697f, 9.7682f, 9.7667f, 9.7651f, 9.7636f, 9.7621f, 9.7605f, 9.759f, 9.7575f, 9.7559f, 9.7544f, 9.7529f, 9.7513f,
                9.7498f, 9.7483f, 9.7468f, 9.7452f, 9.7437f, 9.7422f, 9.7406f, 9.7391f, 9.7376f, 9.7361f, 9.7345f, 9.733f, 9.7315f,
                9.73f, 9.7284f, 9.7269f, 9.7254f, 9.7239f, 9.7223f, 9.7208f, 9.7193f, 9.7178f, 9.7163f, 9.7147f, 9.7132f, 9.7117f,
                9.7102f, 9.7087f, 9.7071f, 9.7056f, 9.7041f, 9.7026f, 9.7011f, 9.6995f, 9.698f, 9.6965f, 9.695f, 9.6935f, 9.692f,
                9.6904f, 9.6889f, 9.6874f, 9.6859f, 9.6844f, 9.6829f, 9.6814f, 9.6798f, 9.6783f, 9.6768f, 9.6753f, 9.6738f, 9.6723f,
                9.6708f, 9.6693f, 9.6678f, 9.6662f, 9.6647f, 9.6632f, 9.6617f, 9.6602f, 9.6587f, 9.6572f, 9.6557f, 9.6542f, 9.6527f,
                9.6512f, 9.65f, 9.6482f, 9.647f, 9.6451f, 9.6439f, 9.6421f, 9.6409f, 9.6391f, 9.6379f, 9.6361f, 9.6349f, 9.6331f, 9.6319f,
                 9.6301f, 9.6289f, 9.6271f, 9.6259f, 9.6241f, 9.6229f, 9.6211f, 9.6199f, 9.6181f, 9.6169f, 9.6151f, 9.6139f, 9.6121f,
                9.6109f, 9.6091f, 9.6079f, 9.6061f, 9.6049f, 9.6031f, 9.602f, 9.6002f, 9.599f, 9.5972f, 9.596f, 9.5942f
            };
            return AccelerationOfGravity;
        }
//-----------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Массив значений температуры в цельсиях по высотам массива TDatabaseAtmospheric.Attitude.
        /// </summary>
        /// <returns>Массив значений температуры в цельсиях по высотам массива TDatabaseAtmospheric.Attitude.</returns>
        private static double[] TemperatureOfCelsiusData()
        {
            double[] TemperatureOfCelsius = new double[143]
            {
                15f, 13.05f, 12.075f, 11.75f, 8.501f, 5.252f, 2.004f, -1.244f, -4.491f, -4.491f, -10.984f, -14.229f, -17.474f,
                -20.719f, -23.963f, -27.207f, -30.45f, -33.693f, -36.935f, -40.176f, -43.417f, -46.658f,-49.898f, -53.137f, -56.376f,
                -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f,
                -56.5f, -56.5f, -56.5f, -56.066f, -55.569f, -55.072f, -54.576f, -54.079f, -53.583f, -53.087f, -52.59f, -52.094f,
                -51.598f, -51.102f, -50.606f, -50.11f, -49.614f, -49.118f, -48.623f, -48.127f, -47.632f, -47.136f, -46.641f, -46.146f,
                -45.65f, -45.155f, -44.66f, -43.563f, -42.177f, -40.792f, -39.406f, -38.021f, -36.637f, -35.252f, -33.868f, -32.483f,
                -31.1f, -29.716f, -28.332f, -26.949f, -25.566f, -24.183f, -22.8f, -21.418f, -20.036f, -18.654f, -17.272f, -15.89f,
                -14.509f, -13.128f, -11.747f, -10.366f, -8.86f, -7.605f, -6.225f, -4.846f, -3.466f, -2.5f, -2.5f, -2.5f, -2.5f, -2.5f,
                -2.5f, -2.5f, -2.5f, -2.5f, -4.119f, -5.22f, -6.873f, -7.974f, -9.626f, -10.727f, -12.379f, -13.48f, -15.131f, -16.231f,
                -17.882f, -18.982f, -20.632f, -21.731f, -23.381f, -24.48f, -26.129f, -27.228f, -28.877f, -29.975f, -31.623f, -32.722f,
                -34.369f, -35.467f, -37.114f, -38.211f, -39.858f, -40.955f, -42.601f, -43.698f, -45.343f, -46.44f, -48.085f, -49.181f,
                -50.825f, -51.921f,-53.565f
            };
            return TemperatureOfCelsius;
        }
//------------------------------------------------------------------------------------------------------------------------------------------------
        private static float[] TemperatureOfCelsiusDataF()
        {
            float[] TemperatureOfCelsius = new float[143]
            {
                15f, 13.05f, 12.075f, 11.75f, 8.501f, 5.252f, 2.004f, -1.244f, -4.491f, -4.491f, -10.984f, -14.229f, -17.474f,
                -20.719f, -23.963f, -27.207f, -30.45f, -33.693f, -36.935f, -40.176f, -43.417f, -46.658f,-49.898f, -53.137f, -56.376f,
                -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f, -56.5f,
                -56.5f, -56.5f, -56.5f, -56.066f, -55.569f, -55.072f, -54.576f, -54.079f, -53.583f, -53.087f, -52.59f, -52.094f,
                -51.598f, -51.102f, -50.606f, -50.11f, -49.614f, -49.118f, -48.623f, -48.127f, -47.632f, -47.136f, -46.641f, -46.146f,
                -45.65f, -45.155f, -44.66f, -43.563f, -42.177f, -40.792f, -39.406f, -38.021f, -36.637f, -35.252f, -33.868f, -32.483f,
                -31.1f, -29.716f, -28.332f, -26.949f, -25.566f, -24.183f, -22.8f, -21.418f, -20.036f, -18.654f, -17.272f, -15.89f,
                -14.509f, -13.128f, -11.747f, -10.366f, -8.86f, -7.605f, -6.225f, -4.846f, -3.466f, -2.5f, -2.5f, -2.5f, -2.5f, -2.5f,
                -2.5f, -2.5f, -2.5f, -2.5f, -4.119f, -5.22f, -6.873f, -7.974f, -9.626f, -10.727f, -12.379f, -13.48f, -15.131f, -16.231f,
                -17.882f, -18.982f, -20.632f, -21.731f, -23.381f, -24.48f, -26.129f, -27.228f, -28.877f, -29.975f, -31.623f, -32.722f,
                -34.369f, -35.467f, -37.114f, -38.211f, -39.858f, -40.955f, -42.601f, -43.698f, -45.343f, -46.44f, -48.085f, -49.181f,
                -50.825f, -51.921f,-53.565f
            };
            return TemperatureOfCelsius;
        }
//--------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Массив значений температуры в кельвинах по высотам массива TDatabaseAtmospheric.Attitude.
        /// </summary>
        /// <returns>Массив значений температуры в кельвинах по высотам массива TDatabaseAtmospheric.Attitude.</returns>
        private static double[] TemperatureOfKelvinData()
        {
            double[] TemperatureOfKelvin = new double[143]
            {
                 288.15f, 286.2f, 285.225f, 284.9f, 281.651f, 278.402f, 275.154f, 271.906f, 268.659f, 268.659f, 262.166f, 258.921f, 255.676f,
                 252.431f, 249.187f, 245.943f, 242.7f, 239.457f, 236.215f, 232.974f, 229.733f, 226.492f, 223.252f, 220.013f, 216.774f, 216.65f,
                 216.65f,  216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f,
                 216.65f, 216.65f, 216.65f, 217.084f, 217.581f, 218.078f, 218.574f, 219.071f, 219.567f, 220.063f, 220.56f, 221.056f, 221.552f,
                 222.048f, 222.544f, 223.04f, 223.536f, 224.032f, 224.527f, 225.023f, 225.518f, 226.014f, 226.509f, 227.004f, 227.5f,
                227.995f, 228.49f, 229.587f, 230.973f, 232.358f, 233.744f, 235.129f, 236.513f, 237.898f, 239.282f, 240.667f, 242.05f,
                243.434f, 244.818f, 246.201f, 247.584f, 248.967f, 250.35f, 251.732f, 253.114f, 254.496f, 255.878f, 257.26f, 258.641f,
                260.022f, 261.403f, 262.784f, 264.164f, 265.545f, 266.925f, 268.304f, 269.684f, 270.65f, 270.65f, 270.65f, 270.65f,
                270.65f, 270.65f, 270.65f, 270.65f, 270.65f, 269.031f, 267.93f, 266.277f, 265.176f, 263.524f, 262.423f, 260.771f,
                259.67f, 258.019f, 256.919f, 255.268f, 254.168f, 252.518f,251.419f, 249.769f, 248.67f, 247.021f, 245.922f, 244.273f,
                243.175f, 241.527f, 240.428f, 238.781f, 237.683f, 236.036f, 234.939f, 233.292f, 232.195f, 230.549f, 229.452f, 227.807f,
                226.71f, 225.065f, 223.969f, 222.325f, 221.229f, 219.585f
            };
            return TemperatureOfKelvin;
        }
//----------------------------------------------------------------------------------------------------------------------------------------
        private static float[] TemperatureOfKelvinDataF()
        {
            float[] TemperatureOfKelvin = new float[143]
            {
                 288.15f, 286.2f, 285.225f, 284.9f, 281.651f, 278.402f, 275.154f, 271.906f, 268.659f, 268.659f, 262.166f, 258.921f, 255.676f,
                 252.431f, 249.187f, 245.943f, 242.7f, 239.457f, 236.215f, 232.974f, 229.733f, 226.492f, 223.252f, 220.013f, 216.774f, 216.65f,
                 216.65f,  216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f, 216.65f,
                 216.65f, 216.65f, 216.65f, 217.084f, 217.581f, 218.078f, 218.574f, 219.071f, 219.567f, 220.063f, 220.56f, 221.056f, 221.552f,
                 222.048f, 222.544f, 223.04f, 223.536f, 224.032f, 224.527f, 225.023f, 225.518f, 226.014f, 226.509f, 227.004f, 227.5f,
                227.995f, 228.49f, 229.587f, 230.973f, 232.358f, 233.744f, 235.129f, 236.513f, 237.898f, 239.282f, 240.667f, 242.05f,
                243.434f, 244.818f, 246.201f, 247.584f, 248.967f, 250.35f, 251.732f, 253.114f, 254.496f, 255.878f, 257.26f, 258.641f,
                260.022f, 261.403f, 262.784f, 264.164f, 265.545f, 266.925f, 268.304f, 269.684f, 270.65f, 270.65f, 270.65f, 270.65f,
                270.65f, 270.65f, 270.65f, 270.65f, 270.65f, 269.031f, 267.93f, 266.277f, 265.176f, 263.524f, 262.423f, 260.771f,
                259.67f, 258.019f, 256.919f, 255.268f, 254.168f, 252.518f,251.419f, 249.769f, 248.67f, 247.021f, 245.922f, 244.273f,
                243.175f, 241.527f, 240.428f, 238.781f, 237.683f, 236.036f, 234.939f, 233.292f, 232.195f, 230.549f, 229.452f, 227.807f,
                226.71f, 225.065f, 223.969f, 222.325f, 221.229f, 219.585f
            };
            return TemperatureOfKelvin;
        }
//--------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Массив значений температуры в кельвинах по высотам массива TDatabaseAtmospheric.Attitude.
        /// </summary>
        /// <returns>Массив значений температуры в кельвинах по высотам массива TDatabaseAtmospheric.Attitude.</returns>
        private static double[] AirKinematicalViscosityData()
        {
            double[] AirKinematicalViscosity = new double[143]
            {
                0.000014607f, 0.000014956f, 0.000015135f, 0.000015195f, 0.000015813f, 0.000016463f, 0.000017147f, 0.000017868f, 0.000018528f,
                0.000019429f, 0.000020275f, 0.000021167f, 0.00002211f, 0.000023107f, 0.000024162f, 0.000025278f, 0.000026461f, 0.000027714f,
                0.000029044f, 0.000030457f, 0.000031957f, 0.000033553f, 0.000035251f, 0.00003706f, 0.000038988f, 0.000042131f, 0.000045574f,
                0.000049297f, 0.000053325f, 0.00005768f, 0.000062391f, 0.000067486f, 0.000072995f, 0.000078954f, 0.000085397f, 0.000092366f,
                0.000099902f, 0.00010805f, 0.00011686f, 0.00012639f, 0.0001367f, 0.00014784f, 0.00015989f, 0.00017355f, 0.00018843f, 0.00020455f,
                0.00022201f, 0.0002409f, 0.00026136f, 0.00028349f, 0.00030743f, 0.00033334f, 0.00036135f, 0.00039164f, 0.00042439f, 0.00045979f,
                0.00049805f, 0.00053939f, 0.00058405f, 0.00063229f, 0.00068438f, 0.00074062f, 0.00080134f, 0.00086688f, 0.0009376f, 0.0010139f,
                0.0010962f, 0.0011906f, 0.0012955f, 0.0014088f, 0.0015313f, 0.0016635f, 0.0018063f, 0.0019603f, 0.0021264f, 0.0023054f, 0.0024983f,
                0.0027061f, 0.0029298f, 0.0031704f, 0.0034293f, 0.0037076f, 0.0040067f, 0.0043279f, 0.0046729f, 0.0050432f, 0.0054405f, 0.0058665f,
                0.0063233f, 0.0068128f, 0.0073371f, 0.0078986f, 0.0084996f, 0.0091427f, 0.0098306f, 0.010566f, 0.011352f, 0.012159f, 0.012939f,
                0.013769f, 0.014652f, 0.015591f, 0.016591f, 0.017654f, 0.018786f, 0.019743f, 0.021048f,  0.021966f, 0.023427f, 0.02446f, 0.026104f,
                0.027266f, 0.029117f, 0.030427f, 0.032514f, 0.033993f, 0.036349f, 0.038019f, 0.040682f, 0.042571f, 0.045586f, 0.047724f, 0.051141f,
                 0.053567f, 0.057444f, 0.060198f, 0.064604f, 0.067736f, 0.07275f, 0.076317f, 0.08203f, 0.086098f, 0.092618f, 0.097263f, 0.10471f, 
                0.11003f, 0.11856f, 0.12454f, 0.13442f, 0.14141f, 0.15264f, 0.16066f, 0.17358f
            };
            return AirKinematicalViscosity;
        }
//----------------------------------------------------------------------------------------------------------------------------------------------------------
        private static float[] AirKinematicalViscosityDataF()
        {
            float[] AirKinematicalViscosity = new float[143]
            {
                0.000014607f, 0.000014956f, 0.000015135f, 0.000015195f, 0.000015813f, 0.000016463f, 0.000017147f, 0.000017868f, 0.000018528f,
                0.000019429f, 0.000020275f, 0.000021167f, 0.00002211f, 0.000023107f, 0.000024162f, 0.000025278f, 0.000026461f, 0.000027714f,
                0.000029044f, 0.000030457f, 0.000031957f, 0.000033553f, 0.000035251f, 0.00003706f, 0.000038988f, 0.000042131f, 0.000045574f,
                0.000049297f, 0.000053325f, 0.00005768f, 0.000062391f, 0.000067486f, 0.000072995f, 0.000078954f, 0.000085397f, 0.000092366f,
                0.000099902f, 0.00010805f, 0.00011686f, 0.00012639f, 0.0001367f, 0.00014784f, 0.00015989f, 0.00017355f, 0.00018843f, 0.00020455f,
                0.00022201f, 0.0002409f, 0.00026136f, 0.00028349f, 0.00030743f, 0.00033334f, 0.00036135f, 0.00039164f, 0.00042439f, 0.00045979f,
                0.00049805f, 0.00053939f, 0.00058405f, 0.00063229f, 0.00068438f, 0.00074062f, 0.00080134f, 0.00086688f, 0.0009376f, 0.0010139f,
                0.0010962f, 0.0011906f, 0.0012955f, 0.0014088f, 0.0015313f, 0.0016635f, 0.0018063f, 0.0019603f, 0.0021264f, 0.0023054f, 0.0024983f,
                0.0027061f, 0.0029298f, 0.0031704f, 0.0034293f, 0.0037076f, 0.0040067f, 0.0043279f, 0.0046729f, 0.0050432f, 0.0054405f, 0.0058665f,
                0.0063233f, 0.0068128f, 0.0073371f, 0.0078986f, 0.0084996f, 0.0091427f, 0.0098306f, 0.010566f, 0.011352f, 0.012159f, 0.012939f,
                0.013769f, 0.014652f, 0.015591f, 0.016591f, 0.017654f, 0.018786f, 0.019743f, 0.021048f,  0.021966f, 0.023427f, 0.02446f, 0.026104f,
                0.027266f, 0.029117f, 0.030427f, 0.032514f, 0.033993f, 0.036349f, 0.038019f, 0.040682f, 0.042571f, 0.045586f, 0.047724f, 0.051141f,
                 0.053567f, 0.057444f, 0.060198f, 0.064604f, 0.067736f, 0.07275f, 0.076317f, 0.08203f, 0.086098f, 0.092618f, 0.097263f, 0.10471f,
                0.11003f, 0.11856f, 0.12454f, 0.13442f, 0.14141f, 0.15264f, 0.16066f, 0.17358f
            };
            return AirKinematicalViscosity;
        }
        //--------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Массив значений динамической вязкости по высотам массива TDatabaseAtmospheric.Attitude.
        /// </summary>
        /// <returns>Массив значений динамической вязкости по высотам массива TDatabaseAtmospheric.Attitude.</returns>
        private static double[] AirDynamicalViscosityData()
        {
            double[] AirDynamicalViscosity = new double[143]
            {
                 0.000017894f, 0.000017799f, 0.000017753f, 0.000017737f, 0.000017579f, 0.000017420f, 0.000017259f, 0.000017099f,
                0.000016847f, 0.000016775f, 0.000016612f, 0.000016448f, 0.000016282f, 0.000016116f, 0.000015950f, 0.000015781f,
                0.000015612f, 0.000015442f, 0.000015271f, 0.000015099f, 0.000014926f, 0.000014752f, 0.000014577f, 0.000014400f,
                0.000014223f, 0.000014216f, 0.000014216f, 0.000014216f, 0.000014216f, 0.000014216f, 0.000014216f, 0.000014216f,
                0.000014216f, 0.000014216f, 0.000014216f, 0.000014216f, 0.000014216f,  0.000014216f, 0.000014216f, 0.000014216f,
                0.000014216f, 0.000014216f, 0.000014216f, 0.000014240f, 0.000014267f, 0.000014294f, 0.000014322f, 0.000014349f,
                0.000013082f, 0.000014403f, 0.000014430f, 0.000014457f, 0.000014484f, 0.000014511f, 0.000014538f, 0.000014565f,
                0.000014592f, 0.000014619f, 0.000014646f, 0.000014673f, 0.000014699f, 0.000014726f, 0.000014753f, 0.000014780f,
                0.000014806f, 0.000014832f, 0.000014859f, 0.000014918f, 0.000014993f, 0.000015066f, 0.000015141f, 0.000015214f,
                0.000015287f, 0.000015360f, 0.000015433f, 0.000015506f, 0.000015578f, 0.000015651f, 0.000015723f, 0.000015794f,
                0.000015866f, 0.000015938f, 0.000016009f, 0.000016080f, 0.000016151f, 0.000016222f, 0.000016293f, 0.000016363f,
                0.000016433f, 0.000016504f, 0.000016573f, 0.000016643f, 0.000016713f, 0.000016782f, 0.000016851f, 0.000016920f,
                0.000016988f, 0.000017037f, 0.000017037f, 0.000017037f, 0.000017037f, 0.000017036f, 0.000017037f, 0.000017036f, 
                0.000017037f, 0.000017037f, 0.000016957f, 0.000016901f, 0.000016818f,  0.000016763f, 0.000016680f, 0.000016625f,
                0.000016541f, 0.000016486f, 0.000016402f, 0.000016346f, 0.000016262f, 0.000016206f, 0.000016121f, 0.000016064f,
                0.000015979f, 0.000015922f, 0.000015837f, 0.000015780f, 0.000015694f, 0.000015637f, 0.000015551f, 0.000015493f,
                0.000015407f, 0.000015349f, 0.000015262f, 0.000015204f, 0.000015116f, 0.000015058f, 0.000014969f, 0.000014911f,
                0.000014823f, 0.000014751f, 0.000014674f,  0.000014616f, 0.000014527f, 0.000014467f, 0.000014377f
            };
            return AirDynamicalViscosity;
        }
//---------------------------------------------------------------------------------------------------------------------------------------
        private static float[] AirDynamicalViscosityDataF()
        {
            float[] AirDynamicalViscosity = new float[143]
            {
                 0.000017894f, 0.000017799f, 0.000017753f, 0.000017737f, 0.000017579f, 0.000017420f, 0.000017259f, 0.000017099f,
                0.000016847f, 0.000016775f, 0.000016612f, 0.000016448f, 0.000016282f, 0.000016116f, 0.000015950f, 0.000015781f,
                0.000015612f, 0.000015442f, 0.000015271f, 0.000015099f, 0.000014926f, 0.000014752f, 0.000014577f, 0.000014400f,
                0.000014223f, 0.000014216f, 0.000014216f, 0.000014216f, 0.000014216f, 0.000014216f, 0.000014216f, 0.000014216f,
                0.000014216f, 0.000014216f, 0.000014216f, 0.000014216f, 0.000014216f,  0.000014216f, 0.000014216f, 0.000014216f,
                0.000014216f, 0.000014216f, 0.000014216f, 0.000014240f, 0.000014267f, 0.000014294f, 0.000014322f, 0.000014349f,
                0.000013082f, 0.000014403f, 0.000014430f, 0.000014457f, 0.000014484f, 0.000014511f, 0.000014538f, 0.000014565f,
                0.000014592f, 0.000014619f, 0.000014646f, 0.000014673f, 0.000014699f, 0.000014726f, 0.000014753f, 0.000014780f,
                0.000014806f, 0.000014832f, 0.000014859f, 0.000014918f, 0.000014993f, 0.000015066f, 0.000015141f, 0.000015214f,
                0.000015287f, 0.000015360f, 0.000015433f, 0.000015506f, 0.000015578f, 0.000015651f, 0.000015723f, 0.000015794f,
                0.000015866f, 0.000015938f, 0.000016009f, 0.000016080f, 0.000016151f, 0.000016222f, 0.000016293f, 0.000016363f,
                0.000016433f, 0.000016504f, 0.000016573f, 0.000016643f, 0.000016713f, 0.000016782f, 0.000016851f, 0.000016920f,
                0.000016988f, 0.000017037f, 0.000017037f, 0.000017037f, 0.000017037f, 0.000017036f, 0.000017037f, 0.000017036f,
                0.000017037f, 0.000017037f, 0.000016957f, 0.000016901f, 0.000016818f,  0.000016763f, 0.000016680f, 0.000016625f,
                0.000016541f, 0.000016486f, 0.000016402f, 0.000016346f, 0.000016262f, 0.000016206f, 0.000016121f, 0.000016064f,
                0.000015979f, 0.000015922f, 0.000015837f, 0.000015780f, 0.000015694f, 0.000015637f, 0.000015551f, 0.000015493f,
                0.000015407f, 0.000015349f, 0.000015262f, 0.000015204f, 0.000015116f, 0.000015058f, 0.000014969f, 0.000014911f,
                0.000014823f, 0.000014751f, 0.000014674f,  0.000014616f, 0.000014527f, 0.000014467f, 0.000014377f
            };
            return AirDynamicalViscosity;
        }
//--------------------------------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Длина массива базы данных
        /// </summary>
        public static int CountX = 143;
 //-------------------------------------------------------------------------------------------------------------------------------
    }
}
